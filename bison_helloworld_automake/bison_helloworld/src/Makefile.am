# Define the program to build
bin_PROGRAMS = helloworld

# Source files, include generated sources from bison and flex
helloworld_SOURCES = main.c helloworld.tab.c helloworld.yy.c

# Header files generated by Bison
BUILT_SOURCES = helloworld.tab.h helloworld.yy.h

# Bison flags: generate header and output to helloworld.tab.c
YACC = bison
YFLAGS = -d -o helloworld.tab.c

# Flex flags: generate header and output to helloworld.yy.c
LEX = flex
AM_LFLAGS = --header-file=helloworld.yy.h --outfile=helloworld.yy.c

# Rules to generate Bison parser and header
helloworld.tab.c helloworld.tab.h: helloworld.y
	$(YACC) $(YFLAGS) helloworld.y

# Rule to generate Flex lexer and header; depends on Bison header
helloworld.yy.c: helloworld.l helloworld.tab.h
	$(LEX) $(AM_LFLAGS) helloworld.l

# Clean up generated files and objects
CLEANFILES = helloworld.tab.c helloworld.tab.h helloworld.yy.c helloworld.yy.h *.o helloworld

# Extra files to include in distribution tarball
EXTRA_DIST = helloworld.l helloworld.y main.c

# Dist target copies executable with uname-based suffix
dist-hook:
	cp helloworld helloworld.$(shell uname | tr 'A-Z' 'a-z')

# Documentation target (optional)
doc:
	cflow *.c

# Run target to run the program
run:
	./helloworld
